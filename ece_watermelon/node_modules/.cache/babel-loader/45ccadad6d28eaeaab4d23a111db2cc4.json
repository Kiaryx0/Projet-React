{"ast":null,"code":"'use strict';\n\nvar warn = require('./lib/warning');\n\nvar hasLocalStorage = true;\nvar testKey = 'react-localstorage.mixin.test-key';\nvar ls;\n\ntry {\n  // Access to global `localStorage` property must be guarded as it\n  // fails under iOS private session mode.\n  ls = global.localStorage;\n  ls.setItem(testKey, 'foo');\n  ls.removeItem(testKey);\n} catch (e) {\n  hasLocalStorage = false;\n} // Warn if localStorage cannot be found or accessed.\n\n\nif (process.browser) {\n  warn(hasLocalStorage, 'localStorage not found. Component state will not be stored to localStorage.');\n}\n\nmodule.exports = {\n  /**\n   * On unmount, save data.\n   *\n   * If the page unloads, this may not fire, so we also mount the function to onbeforeunload.\n   */\n  componentWillUnmount: function () {\n    saveStateToLocalStorage(this); // Remove beforeunload handler if it exists.\n\n    if (this.__react_localstorage_beforeunload) {\n      global.removeEventListener('beforeunload', this.__react_localstorage_beforeunload);\n    }\n  },\n\n  /**\n   * Load data.\n   * This seems odd to do this on componentDidMount, but it prevents server checksum errors.\n   * This is because the server has no way to know what is in your localStorage. So instead\n   * of breaking the checksum and causing a full rerender, we instead change the component after mount\n   * for an efficient diff.\n   */\n  componentDidMount: function () {\n    loadStateFromLocalStorage(this); // We won't get a componentWillUnmount event if we close the tab or refresh, so add a listener\n    // and synchronously populate LS.\n\n    if (hasLocalStorage && this.__react_localstorage_loaded && global.addEventListener) {\n      this.__react_localstorage_beforeunload = module.exports.componentWillUnmount.bind(this);\n      global.addEventListener('beforeunload', this.__react_localstorage_beforeunload);\n    }\n  }\n};\n\nfunction loadStateFromLocalStorage(component) {\n  if (!hasLocalStorage) return;\n  var key = getLocalStorageKey(component);\n  if (key === false) return;\n\n  try {\n    var storedState = JSON.parse(ls.getItem(key));\n    if (storedState) component.setState(storedState);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    if (console) console.warn(\"Unable to load state for\", getDisplayName(component), \"from localStorage.\");\n  }\n\n  component.__react_localstorage_loaded = true;\n}\n\nfunction saveStateToLocalStorage(component) {\n  if (!hasLocalStorage || !component.__react_localstorage_loaded) return;\n  var key = getLocalStorageKey(component);\n  if (key === false) return;\n  ls.setItem(key, JSON.stringify(getSyncState(component)));\n}\n\nfunction getDisplayName(component) {\n  // at least, we cannot get displayname\n  // via this.displayname in react 0.12\n  return component.displayName || component.constructor.displayName || component.constructor.name;\n}\n\nfunction getLocalStorageKey(component) {\n  if (component.getLocalStorageKey) return component.getLocalStorageKey();\n  if (component.props.localStorageKey === false) return false;\n  if (typeof component.props.localStorageKey === 'function') return component.props.localStorageKey.call(component);\n  return component.props.localStorageKey || getDisplayName(component) || 'react-localstorage';\n}\n\nfunction getStateFilterKeys(component) {\n  if (component.getStateFilterKeys) {\n    return typeof component.getStateFilterKeys() === 'string' ? [component.getStateFilterKeys()] : component.getStateFilterKeys();\n  }\n\n  return typeof component.props.stateFilterKeys === 'string' ? [component.props.stateFilterKeys] : component.props.stateFilterKeys;\n}\n/**\n* Filters state to only save keys defined in stateFilterKeys.\n* If stateFilterKeys is not set, returns full state.\n*/\n\n\nfunction getSyncState(component) {\n  var state = component.state;\n  var stateFilterKeys = getStateFilterKeys(component);\n  if (!stateFilterKeys || !state) return state;\n  var result = {},\n      key;\n\n  for (var i = 0; i < stateFilterKeys.length; i++) {\n    key = stateFilterKeys[i];\n    if (state.hasOwnProperty(key)) result[key] = state[key];\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}