{"ast":null,"code":"import { getSessionUser } from \"./DatabaseSession\"; /// This file contains all the functions related to the wallet data access\n\n/**\n * Returns the wallet of the current session user and return null if no one's logged in\n */\n\nexport default function getSessionWallet() {\n  let user = getSessionUser();\n  let wallets = JSON.parse(localStorage.getItem(\"wallets\"));\n  let array = wallets.filter(w => {\n    return w.user_id === user.id;\n  }); // If wallet found return it\n\n  if (array.length === 1) {\n    return array[0];\n  } // Else return null\n  else {\n      return null;\n    }\n}\n/**\n * Return the balance of the wallet as string\n */\n\nexport function getWalletAmount() {\n  let wallet = getSessionWallet(getSessionUser());\n\n  if (wallet != null) {\n    return (wallet.balance / 100.0).toFixed(2);\n  }\n}\n/**\n * Make a deposit on the count using the credit card\n * @param {Amount of money in cents '1700' = 17.00€} money \n * @param {Credit card} card \n */\n\nexport function makeDeposit(money, card) {\n  // Credit wallet\n  let wallets = JSON.parse(localStorage.getItem(\"wallets\"));\n  let current = null;\n\n  for (var i = 0; i < wallets.length; i++) {\n    if (wallets[i].user_id === card.user_id) {\n      wallets[i].balance -= money;\n      current = wallets[i];\n    }\n  }\n\n  localStorage.setItem(\"wallets\", JSON.stringify(wallets)); // Save Payout\n\n  let payins = JSON.parse(localStorage.getItem(\"payouts\"));\n  payins.push({\n    id: payins.length + 1,\n    wallet_id: 5,\n    amount: money\n  });\n}","map":{"version":3,"sources":["D:\\Documents\\GitHub\\Projet-React\\ece_watermelon\\src\\Database\\DatabaseWallet.js"],"names":["getSessionUser","getSessionWallet","user","wallets","JSON","parse","localStorage","getItem","array","filter","w","user_id","id","length","getWalletAmount","wallet","balance","toFixed","makeDeposit","money","card","current","i","setItem","stringify","payins","push","wallet_id","amount"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mBAA/B,C,CAEA;;AAEA;;;;AAGA,eAAe,SAASC,gBAAT,GAA2B;AAEtC,MAAIC,IAAI,GAAGF,cAAc,EAAzB;AACA,MAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAd;AAEA,MAAIC,KAAK,GAAGL,OAAO,CAACM,MAAR,CAAeC,CAAC,IAAE;AAC1B,WAAOA,CAAC,CAACC,OAAF,KAAcT,IAAI,CAACU,EAA1B;AACH,GAFW,CAAZ,CALsC,CAStC;;AACA,MAAGJ,KAAK,CAACK,MAAN,KAAiB,CAApB,EAAsB;AAClB,WAAOL,KAAK,CAAC,CAAD,CAAZ;AACH,GAFD,CAGA;AAHA,OAII;AACA,aAAO,IAAP;AACH;AACJ;AAED;;;;AAGA,OAAO,SAASM,eAAT,GAA0B;AAC7B,MAAIC,MAAM,GAAGd,gBAAgB,CAACD,cAAc,EAAf,CAA7B;;AACA,MAAGe,MAAM,IAAI,IAAb,EAAkB;AACd,WAAO,CAACA,MAAM,CAACC,OAAP,GAAiB,KAAlB,EAAyBC,OAAzB,CAAiC,CAAjC,CAAP;AACH;AACJ;AAED;;;;;;AAKA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAiC;AAEpC;AACA,MAAIjB,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAd;AACA,MAAIc,OAAO,GAAG,IAAd;;AACA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACnB,OAAO,CAACU,MAAxB,EAAgCS,CAAC,EAAjC,EAAoC;AAChC,QAAGnB,OAAO,CAACmB,CAAD,CAAP,CAAWX,OAAX,KAAuBS,IAAI,CAACT,OAA/B,EAAuC;AACnCR,MAAAA,OAAO,CAACmB,CAAD,CAAP,CAAWN,OAAX,IAAsBG,KAAtB;AACAE,MAAAA,OAAO,GAAGlB,OAAO,CAACmB,CAAD,CAAjB;AACH;AACJ;;AACDhB,EAAAA,YAAY,CAACiB,OAAb,CAAqB,SAArB,EAAgCnB,IAAI,CAACoB,SAAL,CAAerB,OAAf,CAAhC,EAXoC,CAapC;;AACA,MAAIsB,MAAM,GAAGrB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;AACAkB,EAAAA,MAAM,CAACC,IAAP,CAAY;AAAId,IAAAA,EAAE,EAAEa,MAAM,CAACZ,MAAP,GAAc,CAAtB;AAAyBc,IAAAA,SAAS,EAAE,CAApC;AAAuCC,IAAAA,MAAM,EAAET;AAA/C,GAAZ;AACH","sourcesContent":["import { getSessionUser } from \"./DatabaseSession\";\n\n/// This file contains all the functions related to the wallet data access\n\n/**\n * Returns the wallet of the current session user and return null if no one's logged in\n */\nexport default function getSessionWallet(){\n\n    let user = getSessionUser();\n    let wallets = JSON.parse(localStorage.getItem(\"wallets\"))\n\n    let array = wallets.filter(w=>{\n        return w.user_id === user.id;\n    });\n\n    // If wallet found return it\n    if(array.length === 1){\n        return array[0];\n    }\n    // Else return null\n    else{\n        return null;\n    }\n}\n\n/**\n * Return the balance of the wallet as string\n */\nexport function getWalletAmount(){\n    let wallet = getSessionWallet(getSessionUser());\n    if(wallet != null){\n        return (wallet.balance / 100.0).toFixed(2);\n    }\n}\n\n/**\n * Make a deposit on the count using the credit card\n * @param {Amount of money in cents '1700' = 17.00€} money \n * @param {Credit card} card \n */\nexport function makeDeposit(money, card){\n    \n    // Credit wallet\n    let wallets = JSON.parse(localStorage.getItem(\"wallets\"));\n    let current = null;\n    for(var i= 0; i<wallets.length; i++){\n        if(wallets[i].user_id === card.user_id){\n            wallets[i].balance -= money;\n            current = wallets[i];\n        }\n    }\n    localStorage.setItem(\"wallets\", JSON.stringify(wallets));\n\n    // Save Payout\n    let payins = JSON.parse(localStorage.getItem(\"payouts\"));\n    payins.push({   id: payins.length+1, wallet_id: 5, amount: money })\n}"]},"metadata":{},"sourceType":"module"}